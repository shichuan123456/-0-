1、执行上下文
  执行上下文：全局代码、函数代码、Eval代码、width、块级作用域。
  你可以拥有任意数量的函数上下文，并且每个函数调用都会创建一个新的上下文，从而创建一个私有的作用域，
  无法从当前函数作用域外直接访问函数内部声明的任何内容。函数可以访问在其当前上下文之外声明的变量，
  但是外部上下文无法访问（函数）其中声明的变量/函数
2、环境栈
  浏览器中的JavaScript解释器是单线程实现的。
  这意味着在浏览器中一次只能发生一件事情，其它动作或事件在所谓的执行栈中排队。
  (function foo(i) {
    if (i === 3) {
        return;
    }
    else {
        foo(++i);
    }
  }(0));
  

  在调用函数时，但在执行实际函数之前，会创建executionContextObj，称为创建阶段。

  以下是解释器如何评估代码的伪概述：

  1、初始化作用域链
  2、创建变量对象：
    创建arguments对象，检查参数的上下文，初始化名称和值并创建引用的副本。
    扫描上下文以获取函数声明：（step1）
      对于找到的每个函数，在变量对象（或活动对象）中创建一个属性，该属性是确切的函数名称，该函数具有指向内存中函数的引用指针。
      如果函数名已存在，则将覆盖引用指针值。
    扫面上下文以获取变量声明：（step2）在创建变量前，函数声明已经结束
      对于找到的每个变量声明，在变量对象（或活动对象）中创建一个属性，该属性是变量名称，并将值初始化为undefined。
      如果变量名称已存在于变量对象（或活动对象）中，则不执行任何操作并继续扫描（即跳过）。
  3、确定上下文中的this。

  激活/代码执行阶段:
    executionContextObj = {
      'scopeChain': { /* variableObject + all parent execution context's variableObject */ },
      'variableObject': { /* function arguments / parameters, inner variable and function declarations */ },
      'this': {}
    }


  function foo(i) {
    var a = 'hello';
    var b = function privateB() {

    };
    function c() {

    }
}

foo(22);

创建阶段：
fooExecutionContext = {
    scopeChain: { ... },
    variableObject: {
        arguments: {
            0: 22,
            length: 1
        },
        i: 22,
        c: pointer to function c()
        a: undefined,
        b: undefined
    },
    this: { ... }
}
执行阶段：
fooExecutionContext = {
    scopeChain: { ... },
    variableObject: {
        arguments: {
            0: 22,
            length: 1
        },
        i: 22,
        c: pointer to function c()
        a: 'hello',
        b: pointer to function privateB()
    },
    this: { ... }
}



(function() {

    console.log(typeof foo); // function pointer
    console.log(typeof bar); // undefined

    var foo = 'hello',
    bar = function() {
        return 'world';
    };

    function foo() {
        return 'hello';
    }

}());​


上述内容引用于：https://github.com/reng99/blogs/issues/11